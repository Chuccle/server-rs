name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        feature: [ "no-default-features", "logging", "stats" ]

    steps:
    - name: Detect if Dependabot
      id: is_dependabot
      run: |
        echo "is_dependabot=false" >> $GITHUB_OUTPUT
        if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
          echo "is_dependabot=true" >> $GITHUB_OUTPUT
        fi

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        token: ${{ steps.is_dependabot.outputs.is_dependabot == 'true' && secrets.GH_DEPENDABOT_PAT || secrets.GH_PAT }}
        submodules: recursive

    - name: Cache cargo registry and build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Get flatbuffers commit hash
      id: flatc_hash
      run: |
        cd buildtools/flatbuffers
        echo "flatc_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Cache Flatc build
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/flatc
        key: ${{ runner.os }}-flatc-${{ steps.flatc_hash.outputs.flatc_hash }}
            
    - name: Install build tools
      run: sudo apt update && sudo apt install -y cmake make

    - name: Build Flatc
      run: |
        if ! command -v flatc &> /dev/null; then
          cd buildtools/flatbuffers
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release .
          make
          sudo make install
        else
          echo "Flatc already cached, skipping build."
        fi

    - name: Test ${{ github.repository }}
      run: |
        if [ "${{ matrix.feature }}" = "no-default-features" ]; then
          cargo test --no-default-features --verbose
        else
          cargo test --features ${{ matrix.feature }} --verbose
        fi

    - name: Clippy ${{ github.repository }}
      run: |
        if [ "${{ matrix.feature }}" = "no-default-features" ]; then
          cargo clippy --no-default-features --all-targets -- -D warnings
        else
          cargo clippy --features ${{ matrix.feature }} --all-targets -- -D warnings
        fi

    - name: Build binaries on master builds
      if: github.ref == 'refs/heads/master'
      run: | 
        rustup target add x86_64-unknown-linux-musl
        sudo apt-get install -y musl-tools
        if [ "${{ matrix.feature }}" = "no-default-features" ]; then
          cargo build --no-default-features --verbose --release --target=x86_64-unknown-linux-musl
        else
          cargo build --features ${{ matrix.feature }} --verbose --release --target=x86_64-unknown-linux-musl
        fi
        BIN_PATH="target/x86_64-unknown-linux-musl/release/server-rs"
        strip "$BIN_PATH"

    - name: Upload binary artifact
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v4
      with:
        name: server-rs-${{ matrix.feature }}-x86_64-unknown-linux-musl
        path: target/x86_64-unknown-linux-musl/release/server-rs